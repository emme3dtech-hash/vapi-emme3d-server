const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');

const app = express();
app.use(express.json());
app.use(cors());

// --- –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
const N8N_WEBHOOK_URL = process.env.N8N_WEBHOOK_URL; // URL –≤–∞—à–µ–≥–æ n8n-–≤–æ—Ä–∫—Ñ–ª–æ—É
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–ª—è n8n –∑–∞–¥–∞–Ω
if (!N8N_WEBHOOK_URL) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è N8N_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
    process.exit(1);
}

// --- –ì–õ–ê–í–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –æ—Ç Vapi.ai
app.post('/vapi-webhook', async (req, res) => {
    const payload = req.body;
    // –î–û–ë–ê–í–õ–ï–ù–û: –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –≤—Å–µ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª Vapi
    console.log('--- VAPI PAYLOAD RECEIVED ---:', JSON.stringify(payload, null, 2));

    // –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ 'getAgentResponse'
    if (payload.type === 'function-call' && payload.functionCall.name === 'getAgentResponse') {
        const { userInput } = payload.functionCall.parameters;
        console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userInput}"`);

        const agentResponse = await askN8NAgent(userInput, payload.call.id);

        return res.json({ result: agentResponse });
    }

    return res.json({ status: 'ok' });
});

// === –¢–ï–°–¢–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–í–Ø–ó–ò –° N8N ===
app.get('/ping-n8n', async (req, res) => {
    console.log('[Ping Test] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤—è–∑–∏ —Å n8n...');
    try {
        const targetUrl = process.env.N8N_WEBHOOK_URL;
        console.log(`[Ping Test] –¶–µ–ª–µ–≤–æ–π URL: ${targetUrl}`);

        const response = await fetch(targetUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ping_test: true, message: 'ping from vapi-emme3d-server' })
        });

        console.log(`[Ping Test] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω! –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
        
        const responseBody = await response.text();
        console.log('[Ping Test] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', responseBody);

        res.json({
            status: 'SUCCESS',
            n8n_response_status: `${response.status} ${response.statusText}`,
            n8n_response_body: responseBody
        });

    } catch (error) {
        console.error('[Ping Test] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
        res.status(500).json({
            status: 'FAILURE',
            error_message: error.message,
            error_code: error.code
        });
    }
});

// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–í–Ø–ó–ò –° N8N ---

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ n8n –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞.
 * @param {string} userInput - –¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} sessionId - ID –∑–≤–æ–Ω–∫–∞ –æ—Ç Vapi –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏.
 */
async function askN8NAgent(userInput, sessionId) {
    try {
        const payload = {
            userInput: userInput,
            sessionId: `vapi_${sessionId}`
        };
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n:', payload);

        const response = await fetch(N8N_WEBHOOK_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
            timeout: 15000
        });

        if (!response.ok) {
            throw new Error(`n8n –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π: ${response.status}`);
        }

        const result = await response.json();
        const aiResponse = result.output || result.text || '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.';
        console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç n8n:', aiResponse);
        return aiResponse;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ n8n –∞–≥–µ–Ω—Ç–∞:', error);
        return '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.';
    }
}


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä-–º–æ—Å—Ç –¥–ª—è Vapi <-> n8n –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});


